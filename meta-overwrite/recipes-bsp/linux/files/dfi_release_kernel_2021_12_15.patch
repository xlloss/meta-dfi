diff --git a/arch/arm64/boot/dts/freescale/Makefile b/arch/arm64/boot/dts/freescale/Makefile
index d0d6d59..c11de71 100644
--- a/arch/arm64/boot/dts/freescale/Makefile
+++ b/arch/arm64/boot/dts/freescale/Makefile
@@ -65,7 +65,9 @@ dtb-$(CONFIG_ARCH_MXC) += imx8mp-evk.dtb imx8mp-evk-root.dtb imx8mp-evk-inmate.d
 			  imx8mp-evk-rm67191.dtb imx8mp-evk-flexcan2.dtb imx8mp-evk-it6263-lvds-dual-channel.dtb \
 			  imx8mp-evk-jdi-wuxga-lvds-panel.dtb imx8mp-ab2.dtb imx8mp-evk-sof-wm8960.dtb \
 			  imx8mp-evk-dsp.dtb imx8mp-evk-ov2775.dtb imx8mp-evk-basler.dtb \
-			  imx8mp-m8mp553-lvdsg215hv.dtb imx8mp-m8mp553-lvdsam1024.dtb
+
+dtb-$(CONFIG_ARCH_MXC) += imx8mp-m8mp553-lvdsg215hv.dtb imx8mp-m8mp553-lvdsam1024.dtb
+dtb-$(CONFIG_ARCH_MXC) += imx8mp-m8mp553-lvdsg215hv-hw02.dtb imx8mp-m8mp553-lvdsam1024-hw02.dtb
 
 dtb-$(CONFIG_ARCH_MXC) += imx8mq-evk.dtb imx8mq-evk-rpmsg.dtb imx8mq-evk-pcie1-m2.dtb imx8mq-evk-usd-wifi.dtb \
 			  imx8mq-evk-usdhc2-m2.dtb
diff --git a/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-hw02.dtsi b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-hw02.dtsi
new file mode 100644
index 00000000..b8fd319
--- /dev/null
+++ b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-hw02.dtsi
@@ -0,0 +1,54 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright 2021 DFI
+ * slash.huang@dfi.com
+ */
+
+#include <dt-bindings/usb/pd.h>
+
+/ {
+	model = "DFI M8MP553 Board HW v02";
+	compatible = "dfi,m8mp553", "fsl,imx8mp";
+
+};
+
+&reg_gpio_usb_hub {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_usb_hub_en_hw02>;
+		gpios = <&gpio3 20 GPIO_ACTIVE_LOW>;
+		status = "okay";
+};
+
+&reg_gpio_usb2_hdr {
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_usb2_hdr_en_hw02>;
+		gpios = <&gpio3 19 GPIO_ACTIVE_LOW>;
+		status = "okay";
+};
+
+&flexcan2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan2>;
+	status = "okay";
+};
+
+&iomuxc {
+	pinctrl_usb_hub_en_hw02: usb_hub_en {
+		fsl,pins = <
+			MX8MP_IOMUXC_SAI5_RXC__GPIO3_IO20 0x16 /* USB Hub Enable */
+		>;
+	};
+
+	pinctrl_usb2_hdr_en_hw02: usb2_hdr_en {
+		fsl,pins = <
+			MX8MP_IOMUXC_SAI5_RXFS__GPIO3_IO19 0x16 /* USB 2.0-HDR Enable */
+		>;
+	};
+
+	pinctrl_flexcan2: flexcan2grp {
+		fsl,pins = <
+			MX8MP_IOMUXC_SAI5_MCLK__CAN2_RX 0x154
+			MX8MP_IOMUXC_SAI5_RXD3__CAN2_TX 0x154
+		>;
+	};
+};
diff --git a/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsam1024-hw02.dts b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsam1024-hw02.dts
new file mode 100644
index 00000000..7e7d2ac
--- /dev/null
+++ b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsam1024-hw02.dts
@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright 2021 DFI
+ * slash.huang@dfi.com
+ */
+
+/dts-v1/;
+
+#include "imx8mp-m8mp553.dtsi"
+#include "imx8mp-m8mp553-hw02.dtsi"
+
+/ {
+	model = "DFI M8MP553 LVDSMode-SAM1024 HWv02";
+	compatible = "dfi,m8mp553", "fsl,imx8mp";
+
+	lvds_backlight: lvds_backlight {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 100000>; /* 10KHz*/
+		status = "okay";
+		pinctrl-0 = <&pinctrl_backlight_en>, <&pinctrl_backlight_pwm2>;
+		power-supply = <&backlight_power>;
+		enable-gpio = <&gpio1 1 GPIO_ACTIVE_HIGH>;
+		post-bl-on-delay-ms = <16>;
+		post-pwm-on-delay-ms = <1000>;
+		brightness-levels = < 0  1  2  3  4  5  6  7  8  9
+				     10 11 12 13 14 15 16 17 18 19
+				     20 21 22 23 24 25 26 27 28 29
+				     30 31 32 33 34 35 36 37 38 39
+				     40 41 42 43 44 45 46 47 48 49
+				     50 51 52 53 54 55 56 57 58 59
+				     60 61 62 63 64 65 66 67 68 69
+				     70 71 72 73 74 75 76 77 78 79
+				     80 81 82 83 84 85 86 87 88 89
+				     90 91 92 93 94 95 96 97 98 99
+				    100>;
+		default-brightness-level = <80>;
+	};
+};
+
+&ldb {
+	status = "okay";
+	startup-delay-us = <20>;
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		status = "okay";
+
+		port@1 {
+			reg = <1>;
+			lvds0_port_1: endpoint {
+					remote-endpoint = <&panel_lvds0_in>;
+			};
+		};
+	};
+};
+
+&panel {
+	status = "okay";
+	panel-timing {
+		/* 1024x600 @60Hz : AM-1024600DTZQW-TD1H */
+		clock-frequency = <51000000>;
+		hactive = <1024>;
+		vactive = <600>;
+		hsync-len = <10>;
+		hfront-porch = <160>;
+		hback-porch = <160>;
+		vsync-len = <5>;
+		vfront-porch = <12>;
+		vback-porch = <23>;
+	};
+};
diff --git a/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsg215hv-hw02.dts b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsg215hv-hw02.dts
new file mode 100644
index 00000000..ba1b4ab
--- /dev/null
+++ b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553-lvdsg215hv-hw02.dts
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright 2021 DFI
+ * slash.huang@dfi.com
+ */
+
+/dts-v1/;
+
+#include "imx8mp-m8mp553.dtsi"
+#include "imx8mp-m8mp553-hw02.dtsi"
+
+/ {
+	model = "DFI M8MP553 LVDSMode-LVDSG215HV HWv02";
+	compatible = "dfi,m8mp553", "fsl,imx8mp";
+
+
+	lvds_backlight: lvds_backlight {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 100000>; /* 10KHz*/
+		status = "okay";
+		pinctrl-0 = <&pinctrl_backlight_en>, <&pinctrl_backlight_pwm2>;
+		power-supply = <&backlight_power>;
+		enable-gpio = <&gpio1 1 GPIO_ACTIVE_HIGH>;
+		post-bl-on-delay-ms = <16>;
+		post-pwm-on-delay-ms = <1000>;
+		brightness-levels = < 0  1  2  3  4  5  6  7  8  9
+				     10 11 12 13 14 15 16 17 18 19
+				     20 21 22 23 24 25 26 27 28 29
+				     30 31 32 33 34 35 36 37 38 39
+				     40 41 42 43 44 45 46 47 48 49
+				     50 51 52 53 54 55 56 57 58 59
+				     60 61 62 63 64 65 66 67 68 69
+				     70 71 72 73 74 75 76 77 78 79
+				     80 81 82 83 84 85 86 87 88 89
+				     90 91 92 93 94 95 96 97 98 99
+				    100>;
+		default-brightness-level = <100>;
+	};
+};
+
+&ldb {
+	status = "okay";
+	fsl,dual-channel;
+	startup-delay-us = <20>;
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		status = "okay";
+
+		port@1 {
+			reg = <1>;
+			lvds0_port_1: endpoint {
+					remote-endpoint = <&panel_lvds0_in>;
+			};
+		};
+	};
+};
+
+&panel {
+	status = "okay";
+	panel-timing {
+		/* 1920x1080 @60Hz : G215HVN01.0 */
+		clock-frequency = <72000000>;
+		hactive = <1920>;
+		vactive = <1080>;
+		hsync-len = <44>;
+		hfront-porch = <88>;
+		hback-porch = <148>;
+		vsync-len = <5>;
+		vfront-porch = <4>;
+		vback-porch = <36>;
+	};
+};
diff --git a/arch/arm64/boot/dts/freescale/imx8mp-m8mp553.dtsi b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553.dtsi
index ef18a2c..fe9fb51 100644
--- a/arch/arm64/boot/dts/freescale/imx8mp-m8mp553.dtsi
+++ b/arch/arm64/boot/dts/freescale/imx8mp-m8mp553.dtsi
@@ -376,6 +376,12 @@
 		};
 
 	};
+
+	display-subsystem {
+		compatible = "fsl,imx-display-subsystem";
+		ports = <&lcdif3_disp>, <&lcdif2_disp>;
+	};
+
 };
 
 &clk {
@@ -823,6 +829,7 @@
 	srp-disable;
 	adp-disable;
 	usb-role-switch;
+	byass_dwc_core_clk;
 	status = "okay";
 
 	port {
@@ -844,6 +851,7 @@
 &usb_dwc3_1 {
 	dr_mode = "host";
 	status = "okay";
+	byass_dwc_core_clk;
 };
 
 &usdhc2 {
diff --git a/arch/arm64/boot/dts/freescale/imx8mp.dtsi b/arch/arm64/boot/dts/freescale/imx8mp.dtsi
index 0ff2840..882d8b8 100644
--- a/arch/arm64/boot/dts/freescale/imx8mp.dtsi
+++ b/arch/arm64/boot/dts/freescale/imx8mp.dtsi
@@ -2161,13 +2161,6 @@
 		status = "disabled";
 	};
 
-	display-subsystem {
-		compatible = "fsl,imx-display-subsystem";
-		ports = <&lcdif1_disp>,
-			<&lcdif2_disp>,
-			<&lcdif3_disp>;
-	};
-
 	imx_ion: imx_ion {
 		compatible = "fsl,mxc-ion";
 		fsl,heap-id = <0>;
diff --git a/drivers/gpu/drm/drm_atomic_helper.c b/drivers/gpu/drm/drm_atomic_helper.c
index 2dd2cd8..dea09fe 100644
--- a/drivers/gpu/drm/drm_atomic_helper.c
+++ b/drivers/gpu/drm/drm_atomic_helper.c
@@ -2125,6 +2125,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 	struct drm_crtc_commit *commit;
 	int i;
 	long ret;
+	#define TIMEOUT (1 * HZ)
 
 	for_each_old_crtc_in_state(old_state, crtc, old_crtc_state, i) {
 		commit = old_crtc_state->commit;
@@ -2133,7 +2134,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 			continue;
 
 		ret = wait_for_completion_timeout(&commit->hw_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[CRTC:%d:%s] hw_done timed out\n",
 				  crtc->base.id, crtc->name);
@@ -2141,7 +2142,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 		/* Currently no support for overwriting flips, hence
 		 * stall for previous one to execute completely. */
 		ret = wait_for_completion_timeout(&commit->flip_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[CRTC:%d:%s] flip_done timed out\n",
 				  crtc->base.id, crtc->name);
@@ -2154,7 +2155,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 			continue;
 
 		ret = wait_for_completion_timeout(&commit->hw_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[CONNECTOR:%d:%s] hw_done timed out\n",
 				  conn->base.id, conn->name);
@@ -2162,7 +2163,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 		/* Currently no support for overwriting flips, hence
 		 * stall for previous one to execute completely. */
 		ret = wait_for_completion_timeout(&commit->flip_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[CONNECTOR:%d:%s] flip_done timed out\n",
 				  conn->base.id, conn->name);
@@ -2175,7 +2176,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 			continue;
 
 		ret = wait_for_completion_timeout(&commit->hw_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[PLANE:%d:%s] hw_done timed out\n",
 				  plane->base.id, plane->name);
@@ -2183,7 +2184,7 @@ void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *old_state)
 		/* Currently no support for overwriting flips, hence
 		 * stall for previous one to execute completely. */
 		ret = wait_for_completion_timeout(&commit->flip_done,
-						  10*HZ);
+						  TIMEOUT);
 		if (ret == 0)
 			DRM_ERROR("[PLANE:%d:%s] flip_done timed out\n",
 				  plane->base.id, plane->name);
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 9ecd2d0..05858e3e 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -1514,6 +1514,7 @@ static int dwc3_probe(struct platform_device *pdev)
 	struct resource		*res, dwc_res;
 	struct dwc3		*dwc;
 
+	bool clk_bypass;
 	int			ret;
 
 	void __iomem		*regs;
@@ -1562,26 +1563,31 @@ static int dwc3_probe(struct platform_device *pdev)
 		return PTR_ERR(dwc->reset);
 
 	if (dev->of_node) {
-		dwc->num_clks = ARRAY_SIZE(dwc3_core_clks);
+		clk_bypass = device_property_read_bool(dev, "byass_dwc_core_clk");
+		if (!clk_bypass) {
+			dwc->num_clks = ARRAY_SIZE(dwc3_core_clks);
 
-		ret = devm_clk_bulk_get(dev, dwc->num_clks, dwc->clks);
-		if (ret == -EPROBE_DEFER)
-			return ret;
-		/*
-		 * Clocks are optional, but new DT platforms should support all
-		 * clocks as required by the DT-binding.
-		 */
-		if (ret)
-			dwc->num_clks = 0;
+			ret = devm_clk_bulk_get(dev, dwc->num_clks, dwc->clks);
+			if (ret == -EPROBE_DEFER)
+				return ret;
+			/*
+			* Clocks are optional, but new DT platforms should support all
+			* clocks as required by the DT-binding.
+			*/
+			if (ret)
+				dwc->num_clks = 0;
+		}
 	}
 
 	ret = reset_control_deassert(dwc->reset);
 	if (ret)
 		return ret;
 
-	ret = clk_bulk_prepare_enable(dwc->num_clks, dwc->clks);
-	if (ret)
-		goto assert_reset;
+	if (!clk_bypass) {
+		ret = clk_bulk_prepare_enable(dwc->num_clks, dwc->clks);
+		if (ret)
+			goto assert_reset;
+	}
 
 	if (!dwc3_core_is_valid(dwc)) {
 		dev_err(dwc->dev, "this is not a DesignWare USB3 DRD Core\n");
